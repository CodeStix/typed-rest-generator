/* DO NOT MODIFY, THIS FILE WAS GENERATED */

import type c from "express-serve-static-core";
import type p from "qs";

export type EndpointsConstraint = {
    [M in "all" | "get" | "post" | "put" | "delete" | "patch" | "options" | "head"]: {
        [path: string]: {
            req: any;
            res: any;
        };
    };
};

declare module "express-serve-static-core" {
    // This is why get isn't type checked, we cannot override its default typing
    export interface Application {
        get: ((name: string) => any) & IRouterMatcher<this, "get">;
    }

    export interface IRouterMatcher<T, Method extends "all" | "get" | "post" | "put" | "delete" | "patch" | "options" | "head" = any> {
        <
            Path extends keyof U[Method],
            P = c.ParamsDictionary,
            ReqQuery = p.ParsedQs,
            Locals extends Record<string, any> = Record<string, any>,
            U extends EndpointsConstraint = Endpoints
        >(
            path: Path,
            // tslint:disable-next-line no-unnecessary-generics (This generic is meant to be passed explicitly.)
            ...handlers: Array<c.RequestHandler<P, U[Method][Path]["res"], U[Method][Path]["req"], ReqQuery, Locals>>
        ): T;
        <
            Path extends keyof U[Method],
            P = c.ParamsDictionary,
            ReqQuery = p.ParsedQs,
            Locals extends Record<string, any> = Record<string, any>,
            U extends EndpointsConstraint = Endpoints
        >(
            path: Path,
            // tslint:disable-next-line no-unnecessary-generics (This generic is meant to be passed explicitly.)
            ...handlers: Array<c.RequestHandlerParams<P, U[Method][Path]["res"], U[Method][Path]["req"], ReqQuery, Locals>>
        ): T;
    }
}
